"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[651],{5515:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=t(5250),i=t(1340);const o={sidebar_position:2},a="Quickstart guide",s={id:"quickstart",title:"Quickstart guide",description:"This quickstart guide is somewhat incomplete. If there is a missing step, let me know! Your best bets are to emulate the demo projects.",source:"@site/docs/quickstart.md",sourceDirName:".",slug:"/quickstart",permalink:"/docs/quickstart",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"About Isograph",permalink:"/docs/intro"},next:{title:"Magic mutation fields",permalink:"/docs/magic-mutation-fields"}},l={},c=[{value:"Adding Isograph to an existing NextJS project",id:"adding-isograph-to-an-existing-nextjs-project",level:2},{value:"Install the compiler, babel plugin and runtime",id:"install-the-compiler-babel-plugin-and-runtime",level:3},{value:"Install the babel plugin and add a recommended alias",id:"install-the-babel-plugin-and-add-a-recommended-alias",level:3},{value:"Disable React strict mode",id:"disable-react-strict-mode",level:3},{value:"Create an <code>isograph.config.json</code> file",id:"create-an-isographconfigjson-file",level:3},{value:"Run the isograph compiler in watch mode",id:"run-the-isograph-compiler-in-watch-mode",level:3},{value:"Teach isograph about your backend",id:"teach-isograph-about-your-backend",level:3},{value:"Tell Isograph to re-render whenever new data is received",id:"tell-isograph-to-re-render-whenever-new-data-is-received",level:3},{value:"Create isograph literals",id:"create-isograph-literals",level:3},{value:"Fetch that Isograph component:",id:"fetch-that-isograph-component",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"quickstart-guide",children:"Quickstart guide"}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsx)(n.p,{children:"This quickstart guide is somewhat incomplete. If there is a missing step, let me know! Your best bets are to emulate the demo projects."})}),"\n",(0,r.jsx)(n.h2,{id:"adding-isograph-to-an-existing-nextjs-project",children:"Adding Isograph to an existing NextJS project"}),"\n",(0,r.jsx)(n.p,{children:"The process for adding Isograph to an existing NextJS project is described in this document. It shouldn't be that different to add it to a project in another framework."}),"\n",(0,r.jsx)(n.h3,{id:"install-the-compiler-babel-plugin-and-runtime",children:"Install the compiler, babel plugin and runtime"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"yarn install --dev @isograph/compiler@0.0.0-main-b5263898\nyarn install --dev @isograph/babel-plugin@0.0.0-main-b5263898\nyarn install @isograph/react@0.0.0-main-b5263898\n"})}),"\n",(0,r.jsxs)(n.admonition,{type:"info",children:[(0,r.jsxs)(n.p,{children:["You cannot install ",(0,r.jsx)(n.code,{children:"@isograph/compiler"})," without specifying a version, as this will install an old version. However, a new release is cut with every push."]}),(0,r.jsxs)(n.p,{children:["To find the latest release, you should check out ",(0,r.jsx)(n.a,{href:"https://www.npmjs.com/package/@isograph/react?activeTab=versions",children:"the npm page"}),' and choose the most recently published "main" version, ',(0,r.jsx)(n.strong,{children:"not"}),' the most recently published "latest" version.']}),(0,r.jsx)(n.p,{children:"This will not be an issue when we cut a proper, versioned release!"})]}),"\n",(0,r.jsxs)(n.p,{children:["Installing the compiler also adds the command ",(0,r.jsx)(n.code,{children:"yarn iso"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"install-the-babel-plugin-and-add-a-recommended-alias",children:"Install the babel plugin and add a recommended alias"}),"\n",(0,r.jsxs)(n.p,{children:["Install the babel plugin in your ",(0,r.jsx)(n.code,{children:".babelrc.js"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'module.exports = {\n  presets: ["next/babel"],\n  plugins: ["@isograph"],\n};\n'})}),"\n",(0,r.jsxs)(n.p,{children:["And add an alias to your ",(0,r.jsx)(n.code,{children:"tsconfig.json"}),". The alias should point to wherever your ",(0,r.jsx)(n.code,{children:"artifact_directory"})," is located. (See the ",(0,r.jsx)(n.code,{children:"isograph.config.json"})," step.)"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'"paths": {\n  "@iso/*": ["./src/__isograph/*"]\n},\n'})}),"\n",(0,r.jsx)(n.h3,{id:"disable-react-strict-mode",children:"Disable React strict mode"}),"\n",(0,r.jsx)(n.p,{children:"Isograph is currently incompatible with React strict mode. Being compatible with strict mode means that (during dev), we will necessarily refetch every query twice. I will eventually lift this restriction, but for now, disable strict mode."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// next.config.js\nconst nextConfig = {\n  reactStrictMode: false,\n};\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"create-an-isographconfigjson-file",children:["Create an ",(0,r.jsx)(n.code,{children:"isograph.config.json"})," file"]}),"\n",(0,r.jsxs)(n.p,{children:["Create an ",(0,r.jsx)(n.code,{children:"isograph.config.json"})," file. Example contents:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "project_root": "./src/components",\n  "artifact_directory": "./src",\n  "schema": "./backend/schema.graphql"\n}\n'})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["Note that (for now!) the ",(0,r.jsx)(n.code,{children:"artifact_directory"})," should not be within the ",(0,r.jsx)(n.code,{children:"project_root"}),", as this causes an infinite build-rebuild loop. This is fixable."]})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["Isograph generates relative paths, so it doesn't really matter where you put your ",(0,r.jsx)(n.code,{children:"artifact_directory"}),"."]})}),"\n",(0,r.jsx)(n.p,{children:"You should also have your graphql schema available at the point. An example schema might be:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-graphql",children:"type Query {\n  viewer: Viewer\n}\n\ntype Viewer {\n  name: String\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"schema"})," field should point to this file."]}),"\n",(0,r.jsx)(n.h3,{id:"run-the-isograph-compiler-in-watch-mode",children:"Run the isograph compiler in watch mode"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"yarn iso --config ./isograph.config.json --watch\n"})}),"\n",(0,r.jsx)(n.p,{children:"The compiler will start running, but since we haven't written any isograph literals, it won't do much."}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["Isograph ",(0,r.jsx)(n.strong,{children:"will"})," generate a ",(0,r.jsx)(n.code,{children:"__refetch"})," artifact for each type that has an ",(0,r.jsx)(n.code,{children:"id: ID!"})," field."]})}),"\n",(0,r.jsx)(n.h3,{id:"teach-isograph-about-your-backend",children:"Teach isograph about your backend"}),"\n",(0,r.jsxs)(n.p,{children:["If your backend is running at ",(0,r.jsx)(n.code,{children:"localhost:4000/graphql"}),", you might put the following code somewhere where it will execute. For example, you might place it at ",(0,r.jsx)(n.code,{children:"pages/index.tsx"})," in a NextJS app:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import { setNetwork } from "@isograph/react";\nfunction makeNetworkRequest<T>(queryText: string, variables: any): Promise<T> {\n  let promise = fetch("http://localhost:4000/graphql", {\n    method: "POST",\n    headers: {\n      // You may need to include a bearer token, for example if you are hitting\n      // the GitHub API.\n      // "Authorization": "Bearer " + BEARER_TOKEN,\n      "Content-Type": "application/json",\n    },\n    body: JSON.stringify({ query: queryText, variables }),\n  }).then((response) => response.json());\n  return promise;\n}\nsetNetwork(makeNetworkRequest);\n'})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["You may need to provide a bearer token if you are using a public API, like that of GitHub. See ",(0,r.jsx)(n.a,{href:"https://github.com/rbalicki2/github-isograph-demo/tree/885530d74d9b8fb374dfe7d0ebdab7185d207c3a/src/isograph-components/SetNetworkWrapper.tsx",children:"this GitHub demo"})," for an example of how to do with a token that you receive from OAuth. See also the ",(0,r.jsx)(n.code,{children:"[...nextauth].tsx"})," file in the same repo."]})}),"\n",(0,r.jsx)(n.h3,{id:"tell-isograph-to-re-render-whenever-new-data-is-received",children:"Tell Isograph to re-render whenever new data is received"}),"\n",(0,r.jsxs)(n.p,{children:["Right now, there is no granular re-rendering in Isograph. (A lot of features are missing!) Instead, we just add a hook at the root that re-renders the entire tree if anything changes in the Isograph store. This can go in the ",(0,r.jsx)(n.code,{children:"App"})," component in ",(0,r.jsx)(n.code,{children:"pages/index.tsx"}),", defined in a future step."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"// N.B. we are rerendering the root component on any store change\n// here. Isograph will support more fine-grained re-rendering in\n// the future, and this will be done automatically as part of\n// useLazyReference.\nconst [, setState] = useState<object | void>();\nuseEffect(() => {\n  return subscribe(() => setState({}));\n}, []);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"create-isograph-literals",children:"Create isograph literals"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Finally"}),', we can get to writing some Isograph components. Let\'s define the Isograph resolver that "is" your home route component! You might create the following in ',(0,r.jsx)(n.code,{children:"src/home_route.tsx"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import React from "react";\nimport { iso } from "@isograph/react";\nimport { ResolverParameterType as HomeRouteParams } from "@iso/Query/home_route/reader.isograph";\n\n// You must export the iso literal\nexport const home_route = iso<HomeRouteParams, ReturnType<typeof HomeRoute>>`\n  Query.home_route @component {\n    viewer {\n      name,\n    },\n  }\n`(HomeRoute);\n\nfunction HomeRoute(props: HomeRouteParams) {\n  return <h1>Hello {props.data.viewer?.name}</h1>;\n}\n'})}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsx)(n.p,{children:"Note: for now, we have a lot of types to provide. These are fairly boilerplate, and should be able to removed in the future. For now, provide them!"})}),"\n",(0,r.jsx)(n.h3,{id:"fetch-that-isograph-component",children:"Fetch that Isograph component:"}),"\n",(0,r.jsxs)(n.p,{children:["That Isograph component isn't doing much on its own. We need to provide a way to fetch its data and render the results. So, in ",(0,r.jsx)(n.code,{children:"pages/index.tsx"}),", add:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import React from "react";\nimport { subscribe, isoFetch, useLazyReference, read } from "@isograph/react";\n\nexport default function App() {\n  // The "subscribe" code block can go here\n\n  return (\n    <React.Suspense fallback={"suspending"}>\n      <Inner />\n    </React.Suspense>\n  );\n}\n\nfunction Inner() {\n  const { queryReference } = useLazyReference(\n    isoFetch<typeof HomeRouteEntrypoint>`\n      Query.home_route\n    `,\n    {\n      /* query variables */\n    }\n  );\n\n  return read(queryReference)({\n    /* additional runtime props */\n  });\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:'Now, if you navigate to your home screen, you should see "Hello" and your name! (You actually won\'t, because there is no GraphQL server running on port 4000. But, a future version of this quickstart will hit an API, like the Star Wars API, that is publicly available and free.)'})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},1340:(e,n,t)=>{t.d(n,{Z:()=>s,a:()=>a});var r=t(79);const i={},o=r.createContext(i);function a(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);